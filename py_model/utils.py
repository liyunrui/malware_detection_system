#!/usr/bin/python3
# -*-coding:utf-8
'''
Created on Fri Dec 1 22:22:35 2017

@author: Ray

'''

import warnings
warnings.filterwarnings("ignore")
import pandas as pd
import numpy as np
from glob import glob
import os
from tqdm import tqdm
import time
import gc
from itertools import chain

def mkdir_p(path):
    if not os.path.isdir(path):
        os.makedirs(path)

def discarded_features(df):
    col = ['duration','min-event_min_of_the_hour','diff2_user_ratio-interval_3_freq_1440min',
    'log_last_user_ratio_over_time-interval_3_freq_1440min','ratio_product_over_num_user']
    return df.drop(col, axis = 1)

def discarded_features_for_lightgbm(df):
    col = ['duration','min-event_week_of_month']
    return df.drop(col, axis = 1)
    
def load_pred_feature(name, keep_all = False):    
    if keep_all == False:
        df = pd.read_csv('../feature/{}/all_features.csv.gz'.format(name), compression='gzip')
        #==============================================================================
        print('discard bad features')
        #==============================================================================
        df = discarded_features(df)
    else:
        df = pd.read_csv('../feature/{}/all_features.csv.gz'.format(name), compression='gzip')
     
    print('{}.shape:{}\n'.format(name, df.shape))
    
    return df

def load_pred_feature_for_lightgbm(name, keep_all = False):    
    if keep_all == False:
        df = pd.read_csv('../feature/{}/all_features.csv.gz'.format(name), compression='gzip')
        #==============================================================================
        print('discard bad features')
        #==============================================================================
        df = discarded_features_for_lightgbm(df)
    else:
        df = pd.read_csv('../feature/{}/all_features.csv.gz'.format(name), compression='gzip')
     
    print('{}.shape:{}\n'.format(name, df.shape))
    
    return df



#==============================================================================
# main
#==============================================================================
if __name__ == "__main__":
    pass

