#!/usr/bin/python3
# -*-coding:utf-8
'''
Created on Fri March 1 22:22:35 2017

@author: Ray

'''
import pandas as pd
import numpy as np
import datetime # datetime preprocessing
import time
from datetime import datetime
import gc
from sklearn.decomposition import PCA
from sklearn.cluster import MiniBatchKMeans
import warnings
warnings.filterwarnings("ignore")


##################################
# loading data
##################################

#train/test
train = pd.read_csv('../input/train.csv.gz', compression='gzip', dtype={'ProductID': str})
test = pd.read_csv('../input/test.csv.gz', compression='gzip', dtype={'ProductID': str})

customer_info = pd.merge(pd.read_csv('../input/customer_info1.csv.gz',compression='gzip'),
                        pd.read_csv('../input/customer_info2.csv.gz',compression='gzip'), on = 'CustomerID', how = 'left'
)
col = customer_info.columns.tolist()[1:]

train.drop(['label','query_datetime','ProductID'], axis = 1, inplace = True)
test.drop(['label','query_datetime','ProductID'], axis = 1, inplace = True)
print ('Loading done')

##################################
# clustering
##################################

#make k-mean efficient
pca = PCA().fit(customer_info[col])
customer_info['pca0'] = pca.transform(customer_info[col])[:, 0]
customer_info['pca1'] = pca.transform(customer_info[col])[:, 1]
customer_info['pca2'] = pca.transform(customer_info[col])[:, 2]
#clustering
for i in [2,3,4]:
    kmeans = MiniBatchKMeans(n_clusters = i, batch_size=10000).fit(customer_info[['pca0','pca1','pca2']])
    customer_info['user_cluster_{}'.format(i)] = kmeans.predict(customer_info[['pca0','pca1','pca2']])

customer_info = customer_info[['CustomerID','user_cluster_2','user_cluster_3','user_cluster_4']]

print ('Clustering done')

def num_user_count_in_cluster(x):
    '''
    num-user_cluster_2_0: 把使用者分兩群, 使用者屬於第一群的人數。
    num-user_cluster_2_1: 把使用者分兩群, 使用者屬於第二群的人數。
    
    parameters:
    --------
    x: DataFrame
    '''    
    new_dataframe = {}
    for col in x.columns.tolist()[1:]:
        new_dataframe[col] = [x[col].sum()]
    return pd.DataFrame(new_dataframe).add_prefix('num-')


#-------------------------
# train
#-------------------------

train = pd.merge(train, customer_info, on = 'CustomerID', how = 'left')
train = pd.get_dummies(train, columns=['user_cluster_2','user_cluster_3','user_cluster_4'])
train = train.drop_duplicates('CustomerID').groupby('id').apply(num_user_count_in_cluster).reset_index().drop(['num-CustomerID','level_1'], axis = 1)

print ('train done')
#-------------------------
#save
#-------------------------

train.to_csv('../feature/{}/customer_segment_by_user.csv.gz'.format('train'), index = False, compression='gzip')
del train

#-------------------------
# test
#-------------------------

test = pd.merge(test, customer_info, on = 'CustomerID', how = 'left')
test = pd.get_dummies(test, columns=['user_cluster_2','user_cluster_3','user_cluster_4'])
test = test.drop_duplicates('CustomerID').groupby('id').apply(num_user_count_in_cluster).reset_index().drop(['num-CustomerID','level_1'], axis = 1)

print ('test done')
#-------------------------
#save
#-------------------------

test.to_csv('../feature/{}/customer_segment_by_user.csv.gz'.format('test'), index = False, compression='gzip')
