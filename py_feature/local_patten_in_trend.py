import pandas as pd
import numpy as np
import datetime # datetime preprocessing
import utils # made by author for efficiently dealing with data

##################################
# loading data
##################################
train = pd.read_csv('../input/train.csv.gz', compression='gzip', dtype={'ProductID': str})
test = pd.read_csv('../input/test.csv.gz', compression='gzip', dtype={'ProductID': str})

print('loading finish')

##################################
# pre-processing
##################################

# convert query_datetime(str type) column to datetime type
train['query_datetime'] = pd.to_datetime(train.query_datetime)
test['query_datetime'] = pd.to_datetime(test.query_datetime)

print('pre-processing done')

def first_period_state(x, interval = 10):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[x.query_datetime <= segment_period_point[0]]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()
def second_period_state(x, interval = 10):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[0] ) 
         & (x.query_datetime <= segment_period_point[1] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()        
def third_period_state(x, interval = 10):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[1] ) 
         & (x.query_datetime <= segment_period_point[2] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()    
def fourth_period_state(x, interval = 10):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[2] ) 
         & (x.query_datetime <= segment_period_point[3] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()     
def fifth_period_state(x, interval = 10):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[3] ) 
         & (x.query_datetime <= segment_period_point[4] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()    
def sixth_period_state(x, interval = 10):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[4] ) 
         & (x.query_datetime <= segment_period_point[5] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()       
def seventh_period_state(x, interval = 10):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[5] ) 
         & (x.query_datetime <= segment_period_point[6] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()      
def eighth_period_state(x, interval = 10):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[6] ) 
         & (x.query_datetime <= segment_period_point[7] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()      
def ninth_period_state(x, interval = 10):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[7] ) 
         & (x.query_datetime <= segment_period_point[8] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()                                                         
def last_period_state(x):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    last_df = x[x.query_datetime > segment_period_point[8]]
    if last_df.empty:
        return 0
    else:
        return last_df.interval_count.sum()    

#-------------------------
#train
#-------------------------
df1 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = '1s') ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df1 = df1.reset_index('query_datetime').reset_index('id')
df1 = df1.groupby('id').apply(prior_period_state).to_frame('prior_period_count')
df1 = df1.reset_index()

df2 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = '1s') ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df2 = df2.reset_index('query_datetime').reset_index('id')
df2 = df2.groupby('id').apply(middle_period_state).to_frame('middle_period_count')
df2 = df2.reset_index()

df3 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = '1s') ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df3 = df3.reset_index('query_datetime').reset_index('id')
df3 = df3.groupby('id').apply(last_period_state).to_frame('last_period_count')
df3 = df3.reset_index()

train = pd.merge(df1,df2,on='id',how='left')
train = pd.merge(train,df3,on='id',how='left')
del df1,df2,df3
#-------------------------
#test
#-------------------------
df1 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = '60min') ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df1 = df1.reset_index('query_datetime').reset_index('id')
df1 = df1.groupby('id').apply(prior_period_state).to_frame('prior_period_count')
df1 = df1.reset_index()

df2 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = '60min') ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df2 = df2.reset_index('query_datetime').reset_index('id')
df2 = df2.groupby('id').apply(middle_period_state).to_frame('middle_period_count')
df2 = df2.reset_index()

df3 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = '60min') ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df3 = df3.reset_index('query_datetime').reset_index('id')
df3 = df3.groupby('id').apply(last_period_state).to_frame('last_period_count')
df3 = df3.reset_index()

test = pd.merge(df1,df2,on='id',how='left')
test = pd.merge(test,df3,on='id',how='left')
del df1,df2,df3
#-------------------------
#save
#-------------------------

train.to_csv('../feature/{}/computer_program_trind_60min.csv.gz'.format('train'), index = False, compression='gzip')
test.to_csv('../feature/{}/computer_program_trind_60min.csv.gz'.format('test'), index = False, compression='gzip')
