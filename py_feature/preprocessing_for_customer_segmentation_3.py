#!/usr/bin/python3
# -*-coding:utf-8
'''
Created on Fri March 1 22:22:35 2017

@author: Ray

'''
import pandas as pd
import numpy as np
import datetime # datetime preprocessing
import time
from datetime import datetime
import gc
from sklearn.decomposition import PCA
import utils # made by author for efficiently dealing with data
import warnings
warnings.filterwarnings("ignore")

##################################
# loading data
##################################
s = time.time()
train = pd.read_csv('../input/train.csv.gz', compression='gzip', dtype={'ProductID': str})
test = pd.read_csv('../input/test.csv.gz', compression='gzip', dtype={'ProductID': str})

# ProductID Cleaning
train['ProductID'] = train.ProductID.map(str)
train['ProductID'] = train.ProductID.apply(lambda x: '055649' if x == '55649' else x)
test['ProductID'] = test.ProductID.map(str)
test['ProductID'] = test.ProductID.apply(lambda x: '055649' if x == '55649' else x)

# convert query_datetime(str type) column to datetime type
train['query_datetime'] = pd.to_datetime(train.query_datetime)
test['query_datetime'] = pd.to_datetime(test.query_datetime)

e = time.time()
print (e - s)

df_all = pd.concat([train,test])
df_all = df_all.drop('label', axis = 1)

def product_one_hot_encoding(x):
    '''
    make ProductID become one-hot encoding form
    
    parameters:
    --------
    x: DataFrame
    '''    
    new_dataframe = {}
    for col in x.columns:
        #print (col)
        new_dataframe[col] =[1 if i > 0 else 0 for i in [x[col].sum()] ] 
    return  pd.DataFrame(new_dataframe)

# 使用者都用什麼裝置來登入可疑程式的
df = pd.get_dummies(df_all.set_index('CustomerID'), columns=['ProductID'])
df = df.drop(['id','query_datetime'], axis = 1)
df = df.groupby('CustomerID').apply(product_one_hot_encoding).reset_index().drop('level_1',axis= 1)
# reduce memory
utils.reduce_memory(df)

# dimension reduction
n_components = 20
pca = PCA(n_components = n_components).fit(df[col])
print (pca.explained_variance_ratio_.cumsum()[-1])
output = []
for i in range(n_components):
    df['pca{}'.format(i)] = pca.transform(df[col])[:, i]
    output.append('pca{}'.format(i))
    
df = df[output]

# reduce memory
utils.reduce_memory(df)


# output
df.to_csv('../input/customer_info3.csv.gz', index=False, compression='gzip')



