import pandas as pd
import numpy as np
import datetime # datetime preprocessing
import utils # made by author for efficiently dealing with data

##################################
# loading data
##################################
train = pd.read_csv('../input/train.csv.gz', compression='gzip', dtype={'ProductID': str})
test = pd.read_csv('../input/test.csv.gz', compression='gzip', dtype={'ProductID': str})

print('loading finish')

##################################
# pre-processing
##################################

# convert query_datetime(str type) column to datetime type
train['query_datetime'] = pd.to_datetime(train.query_datetime)
test['query_datetime'] = pd.to_datetime(test.query_datetime)

print('pre-processing done')

##################################
# using global window to capture local pattern
##################################

'''
using global window to capture local pattern
we have two parameters needed to design.
    1.how many global windows we need(e.g. interval = 3)
    2.how samll the local pattern we need(e.g. freq = 10 min)
Basically, our principle is as the smaller freq is, the more interval is.  
'''
def first_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[x.query_datetime <= segment_period_point[0]]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()
def second_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[0] ) 
         & (x.query_datetime <= segment_period_point[1] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()        
def third_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[1] ) 
         & (x.query_datetime <= segment_period_point[2] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()    
def fourth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[2] ) 
         & (x.query_datetime <= segment_period_point[3] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()     
def fifth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[3] ) 
         & (x.query_datetime <= segment_period_point[4] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()    
def sixth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[4] ) ]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()  
def seventh_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[5] ) 
         & (x.query_datetime <= segment_period_point[6] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()      
def eighth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[6] ) 
         & (x.query_datetime <= segment_period_point[7] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()      
def ninth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[7] ) 
         & (x.query_datetime <= segment_period_point[8] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()                                                         
def tenth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[8] ) 
         & (x.query_datetime <= segment_period_point[9] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()
def eleventh_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[9] ) 
         & (x.query_datetime <= segment_period_point[10] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()
def twelfth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[10] ) 
         & (x.query_datetime <= segment_period_point[11] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()
def thirteenth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[11] ) 
         & (x.query_datetime <= segment_period_point[12] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()        
def fourteenth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[12] ) 
         & (x.query_datetime <= segment_period_point[13] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()    
def fifteenth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[13] ) 
         & (x.query_datetime <= segment_period_point[14] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()     
def sixteenth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[14] ) 
         & (x.query_datetime <= segment_period_point[15] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()    
def seventeenth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[15] ) 
         & (x.query_datetime <= segment_period_point[16] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()  
def eighteenth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[16] ) 
         & (x.query_datetime <= segment_period_point[17] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()      
def nineteenth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[17] ) 
         & (x.query_datetime <= segment_period_point[18] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()      
def twentieth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    interval: int
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[18] ) 
         & (x.query_datetime <= segment_period_point[19] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()                                                         
def twenty_first_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[19] ) 
         & (x.query_datetime <= segment_period_point[20] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()
def twenty_second_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[20] ) 
         & (x.query_datetime <= segment_period_point[21] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()
def twenty_third_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[21] ) 
         & (x.query_datetime <= segment_period_point[22] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()
def twenty_fourth_period_state(x, interval = 24):
    '''
    output count in inital, middle, final interval 
    
    parameters:
    ------
    x: DataFrame
    '''
    #time period segment --> prior, middle, last
    delta = x.query_datetime.max() - x.query_datetime.min()
    local_window = delta/ interval
    segment_period_point = []
    for i in range(interval):
        time_period = x.query_datetime.min() + (i+1) * local_window
        segment_period_point.append(time_period)
    #selecting df based on time period
    prior_df = x[(x.query_datetime > segment_period_point[22] )]
    if prior_df.empty:
        return 0
    else:
        return prior_df.interval_count.sum()        

group_freq = '180min'
interval = 24
#-------------------------
#train
#-------------------------
df1 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df1 = df1.reset_index('query_datetime').reset_index('id')
df1 = df1.groupby('id').apply(first_period_state).to_frame('first_period_state')
df1 = df1.reset_index()

df2 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df2 = df2.reset_index('query_datetime').reset_index('id')
df2 = df2.groupby('id').apply(second_period_state).to_frame('second_period_state')
df2 = df2.reset_index()

df3 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df3 = df3.reset_index('query_datetime').reset_index('id')
df3 = df3.groupby('id').apply(third_period_state).to_frame('third_period_state')
df3 = df3.reset_index()

df4 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df4 = df4.reset_index('query_datetime').reset_index('id')
df4 = df4.groupby('id').apply(fourth_period_state).to_frame('fourth_period_state')
df4 = df4.reset_index()

df5 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df5 = df5.reset_index('query_datetime').reset_index('id')
df5 = df5.groupby('id').apply(fifth_period_state).to_frame('fifth_period_state')
df5 = df5.reset_index()

df6 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df6 = df6.reset_index('query_datetime').reset_index('id')
df6 = df6.groupby('id').apply(sixth_period_state).to_frame('sixth_period_state')
df6 = df6.reset_index()

df7 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df7 = df7.reset_index('query_datetime').reset_index('id')
df7 = df7.groupby('id').apply(seventh_period_state).to_frame('seventh_period_state')
df7 = df7.reset_index()

df8 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df8 = df8.reset_index('query_datetime').reset_index('id')
df8 = df8.groupby('id').apply(eighth_period_state).to_frame('eighth_period_state')
df8 = df8.reset_index()

df9 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df9 = df9.reset_index('query_datetime').reset_index('id')
df9 = df9.groupby('id').apply(ninth_period_state).to_frame('ninth_period_state')
df9 = df9.reset_index()

df10 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df10 = df10.reset_index('query_datetime').reset_index('id')
df10 = df10.groupby('id').apply(tenth_period_state).to_frame('tenth_period_state')
df10 = df10.reset_index()

df11 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df11 = df11.reset_index('query_datetime').reset_index('id')
df11 = df11.groupby('id').apply(eleventh_period_state).to_frame('eleventh_period_state')
df11 = df11.reset_index()

df12 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df12 = df12.reset_index('query_datetime').reset_index('id')
df12 = df12.groupby('id').apply(twelfth_period_state).to_frame('twelfth_period_state')
df12 = df12.reset_index()

df13 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df13 = df13.reset_index('query_datetime').reset_index('id')
df13 = df13.groupby('id').apply(thirteenth_period_state).to_frame('thirteenth_period_state')
df13 = df13.reset_index()

df14 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df14 = df14.reset_index('query_datetime').reset_index('id')
df14 = df14.groupby('id').apply(fourteenth_period_state).to_frame('fourteenth_period_state')
df14 = df14.reset_index()

df15 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df15 = df15.reset_index('query_datetime').reset_index('id')
df15 = df15.groupby('id').apply(fifteenth_period_state).to_frame('fifteenth_period_state')
df15 = df15.reset_index()

df16 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df16 = df16.reset_index('query_datetime').reset_index('id')
df16 = df16.groupby('id').apply(sixteenth_period_state).to_frame('sixteenth_period_state')
df16 = df16.reset_index()

df17 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df17 = df17.reset_index('query_datetime').reset_index('id')
df17 = df17.groupby('id').apply(seventeenth_period_state).to_frame('seventeenth_period_state')
df17 = df17.reset_index()

df18 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df18 = df18.reset_index('query_datetime').reset_index('id')
df18 = df18.groupby('id').apply(eighteenth_period_state).to_frame('eighteenth_period_state')
df18 = df18.reset_index()

df19 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df19 = df19.reset_index('query_datetime').reset_index('id')
df19 = df19.groupby('id').apply(nineteenth_period_state).to_frame('nineteenth_period_state')
df19 = df19.reset_index()

df20 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df20 = df20.reset_index('query_datetime').reset_index('id')
df20 = df20.groupby('id').apply(twentieth_period_state).to_frame('twentieth_period_state')
df20 = df20.reset_index()

df21 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df21 = df21.reset_index('query_datetime').reset_index('id')
df21 = df21.groupby('id').apply(twenty_first_period_state).to_frame('twenty_first_period_state')
df21 = df21.reset_index()

df22 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df22 = df22.reset_index('query_datetime').reset_index('id')
df22 = df22.groupby('id').apply(twenty_second_period_state).to_frame('twenty_second_period_state')
df22 = df22.reset_index()

df23 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df23 = df23.reset_index('query_datetime').reset_index('id')
df23 = df23.groupby('id').apply(twenty_third_period_state).to_frame('twenty_third_period_state')
df23 = df23.reset_index()

df24 = train.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df24 = df24.reset_index('query_datetime').reset_index('id')
df24 = df24.groupby('id').apply(twenty_fourth_period_state).to_frame('twenty_fourth_period_state')
df24 = df24.reset_index()
#merge
train = pd.merge(df1,df2,on='id',how='left')
train = pd.merge(train,df3,on='id',how='left')
train = pd.merge(train,df4,on='id',how='left')
train = pd.merge(train,df5,on='id',how='left')
train = pd.merge(train,df6,on='id',how='left')
train = pd.merge(train,df7,on='id',how='left')
train = pd.merge(train,df8,on='id',how='left')
train = pd.merge(train,df9,on='id',how='left')
train = pd.merge(train,df10,on='id',how='left')
train = pd.merge(train,df11,on='id',how='left')
train = pd.merge(train,df12,on='id',how='left')
train = pd.merge(train,df13,on='id',how='left')
train = pd.merge(train,df14,on='id',how='left')
train = pd.merge(train,df15,on='id',how='left')
train = pd.merge(train,df16,on='id',how='left')
train = pd.merge(train,df17,on='id',how='left')
train = pd.merge(train,df18,on='id',how='left')
train = pd.merge(train,df19,on='id',how='left')
train = pd.merge(train,df20,on='id',how='left')
train = pd.merge(train,df21,on='id',how='left')
train = pd.merge(train,df22,on='id',how='left')
train = pd.merge(train,df23,on='id',how='left')
train = pd.merge(train,df24,on='id',how='left')

train = train.add_suffix('-interval_{}_freq_{}'.format(interval,group_freq)) \
.rename(columns={'id-interval_{}_freq_{}'.format(interval,group_freq): 'id'})
del df1,df2,df3,df4,df5,df6,df7,df8,df9,df10,df11,df12,df13,df14,df15,df16,df17,df18,df19,df20,df21,df22,df23,df24
#-------------------------
#test
#-------------------------
df1 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df1 = df1.reset_index('query_datetime').reset_index('id')
df1 = df1.groupby('id').apply(first_period_state).to_frame('first_period_state')
df1 = df1.reset_index()

df2 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df2 = df2.reset_index('query_datetime').reset_index('id')
df2 = df2.groupby('id').apply(second_period_state).to_frame('second_period_state')
df2 = df2.reset_index()

df3 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df3 = df3.reset_index('query_datetime').reset_index('id')
df3 = df3.groupby('id').apply(third_period_state).to_frame('third_period_state')
df3 = df3.reset_index()

df4 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df4 = df4.reset_index('query_datetime').reset_index('id')
df4 = df4.groupby('id').apply(fourth_period_state).to_frame('fourth_period_state')
df4 = df4.reset_index()

df5 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df5 = df5.reset_index('query_datetime').reset_index('id')
df5 = df5.groupby('id').apply(fifth_period_state).to_frame('fifth_period_state')
df5 = df5.reset_index()

df6 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df6 = df6.reset_index('query_datetime').reset_index('id')
df6 = df6.groupby('id').apply(sixth_period_state).to_frame('sixth_period_state')
df6 = df6.reset_index()

df7 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df7 = df7.reset_index('query_datetime').reset_index('id')
df7 = df7.groupby('id').apply(seventh_period_state).to_frame('seventh_period_state')
df7 = df7.reset_index()

df8 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df8 = df8.reset_index('query_datetime').reset_index('id')
df8 = df8.groupby('id').apply(eighth_period_state).to_frame('eighth_period_state')
df8 = df8.reset_index()

df9 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df9 = df9.reset_index('query_datetime').reset_index('id')
df9 = df9.groupby('id').apply(ninth_period_state).to_frame('ninth_period_state')
df9 = df9.reset_index()

df10 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df10 = df10.reset_index('query_datetime').reset_index('id')
df10 = df10.groupby('id').apply(tenth_period_state).to_frame('tenth_period_state')
df10 = df10.reset_index()

df11 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df11 = df11.reset_index('query_datetime').reset_index('id')
df11 = df11.groupby('id').apply(eleventh_period_state).to_frame('eleventh_period_state')
df11 = df11.reset_index()

df12 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df12 = df12.reset_index('query_datetime').reset_index('id')
df12 = df12.groupby('id').apply(twelfth_period_state).to_frame('twelfth_period_state')
df12 = df12.reset_index()

df13 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df13 = df13.reset_index('query_datetime').reset_index('id')
df13 = df13.groupby('id').apply(thirteenth_period_state).to_frame('thirteenth_period_state')
df13 = df13.reset_index()

df14 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df14 = df14.reset_index('query_datetime').reset_index('id')
df14 = df14.groupby('id').apply(fourteenth_period_state).to_frame('fourteenth_period_state')
df14 = df14.reset_index()

df15 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df15 = df15.reset_index('query_datetime').reset_index('id')
df15 = df15.groupby('id').apply(fifteenth_period_state).to_frame('fifteenth_period_state')
df15 = df15.reset_index()

df16 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df16 = df16.reset_index('query_datetime').reset_index('id')
df16 = df16.groupby('id').apply(sixteenth_period_state).to_frame('sixteenth_period_state')
df16 = df16.reset_index()

df17 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df17 = df17.reset_index('query_datetime').reset_index('id')
df17 = df17.groupby('id').apply(seventeenth_period_state).to_frame('seventeenth_period_state')
df17 = df17.reset_index()

df18 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df18 = df18.reset_index('query_datetime').reset_index('id')
df18 = df18.groupby('id').apply(eighteenth_period_state).to_frame('eighteenth_period_state')
df18 = df18.reset_index()

df19 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df19 = df19.reset_index('query_datetime').reset_index('id')
df19 = df19.groupby('id').apply(nineteenth_period_state).to_frame('nineteenth_period_state')
df19 = df19.reset_index()

df20 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df20 = df20.reset_index('query_datetime').reset_index('id')
df20 = df20.groupby('id').apply(twentieth_period_state).to_frame('twentieth_period_state')
df20 = df20.reset_index()

df21 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df21 = df21.reset_index('query_datetime').reset_index('id')
df21 = df21.groupby('id').apply(twenty_first_period_state).to_frame('twenty_first_period_state')
df21 = df21.reset_index()

df22 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df22 = df22.reset_index('query_datetime').reset_index('id')
df22 = df22.groupby('id').apply(twenty_second_period_state).to_frame('twenty_second_period_state')
df22 = df22.reset_index()

df23 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df23 = df23.reset_index('query_datetime').reset_index('id')
df23 = df23.groupby('id').apply(twenty_third_period_state).to_frame('twenty_third_period_state')
df23 = df23.reset_index()

df24 = test.set_index('query_datetime').groupby(['id',pd.Grouper(freq = group_freq) ]).count()[['label']]\
.rename(columns={'query_datetime': 'query_datetime_group', 'label': 'interval_count'})
df24 = df24.reset_index('query_datetime').reset_index('id')
df24 = df24.groupby('id').apply(twenty_fourth_period_state).to_frame('twenty_fourth_period_state')
df24 = df24.reset_index()
#merge
test = pd.merge(df1,df2,on='id',how='left')
test = pd.merge(test,df3,on='id',how='left')
test = pd.merge(test,df4,on='id',how='left')
test = pd.merge(test,df5,on='id',how='left')
test = pd.merge(test,df6,on='id',how='left')
test = pd.merge(test,df7,on='id',how='left')
test = pd.merge(test,df8,on='id',how='left')
test = pd.merge(test,df9,on='id',how='left')
test = pd.merge(test,df10,on='id',how='left')
test = pd.merge(test,df11,on='id',how='left')
test = pd.merge(test,df12,on='id',how='left')
test = pd.merge(test,df13,on='id',how='left')
test = pd.merge(test,df14,on='id',how='left')
test = pd.merge(test,df15,on='id',how='left')
test = pd.merge(test,df16,on='id',how='left')
test = pd.merge(test,df17,on='id',how='left')
test = pd.merge(test,df18,on='id',how='left')
test = pd.merge(test,df19,on='id',how='left')
test = pd.merge(test,df20,on='id',how='left')
test = pd.merge(test,df21,on='id',how='left')
test = pd.merge(test,df22,on='id',how='left')
test = pd.merge(test,df23,on='id',how='left')
test = pd.merge(test,df24,on='id',how='left')

test = test.add_suffix('-interval_{}_freq_{}'.format(interval,group_freq)) \
.rename(columns={'id-interval_{}_freq_{}'.format(interval,group_freq): 'id'})
del df1,df2,df3,df4,df5,df6,df7,df8,df9,df10,df11,df12,df13,df14,df15,df16,df17,df18,df19,df20,df21,df22,df23,df24

#-------------------------
#save
#-------------------------

train.to_csv('../feature/{}/global_window_{}_local_pattern_{}.csv.gz'.format('train',interval,group_freq), index = False, compression='gzip')
test.to_csv('../feature/{}/global_window_{}_local_pattern_{}.csv.gz'.format('test',interval,group_freq), index = False, compression='gzip')

